{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","inputTop","unputBottom","textSize","textColor","textFont","dateiTyp","state","setState","meme","setMeme","finalMeme","setfinalMeme","handleChange","event","target","name","value","style","color","fontSize","fontFamily","className","id","type","memeFile","onChange","evt","file","files","reader","FileReader","onload","e","result","readAsDataURL","accept","inputTopinputTop","placeholder","inputBottom","min","max","src","alt","onClick","node","document","getElementById","domtoimage","toPng","then","dataUrl","Image","catch","error","console","downloadImage","href","download","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.04d89f3e.chunk.js","sourcesContent":["import React, {useState} from \"react\"\nimport domtoimage from \"dom-to-image\"\n\nconst App = () => {\n  // Texte + Dateityp\n  const [state, setState] = useState({\n    inputTop: \"   \",\n    unputBottom: \"   \",\n    textSize: \"60\",\n    textColor: \"#ffffff\",\n    textFont: \"Verdana\",\n    dateiTyp: \".jpg\"\n  })\n\n  // Image\n  const [meme, setMeme] = useState()\n\n  // Image + Texte (fertiges Meme)\n  const [finalMeme, setfinalMeme] = useState()\n\n  // Controlled Input für Texte + Dateityp\n  const handleChange = (event) => {\n    const {name, value} = event.target\n    setState({\n      ...state,\n      [name]: value\n    })\n  }\n\n  // Lokale Datei hochladen (in Anlehnung an https://www.html5rocks.com/en/tutorials/file/dndfiles/)\n  const handleFileSelect = (evt) => {\n    var file = evt.target.files[0]\n    var reader = new FileReader()\n    reader.onload = (() => {\n      return function(e) {\n        setMeme(e.target.result)        \n      };\n    })(file);\n    reader.readAsDataURL(file)\n  }\n\n  // Image und Text auf Canvas übertragen und herunterladen (In Anlehnung an https://github.com/tsayen/dom-to-image)\n  const downloadImage = () => {\t\n    var node = document.getElementById(\"final\");\n    domtoimage.toPng(node)\n      .then(function (dataUrl) {\n          var img = new Image();\n          img.src = dataUrl;\n          setfinalMeme(dataUrl)\n      })\n      .catch(function (error) {\n          console.error(\"Ein Fehler ist aufgetreten!\", error);\n      });\n  }\n\n  // Style für Textelemente\n  const style = {\n    color: state.textColor,\n    fontSize: state.textSize + \"px\",\n    fontFamily: state.textFont\n  }\n\n\n  return (\n    <div className=\"mainContainer\">\n      <h1>Meme Generator</h1>\n      {/*Parameter zur Meme Erstellung*/}\n      <form>\n      <label>Datei Auswählen\n          <input\n            id=\"memeFile\"\n            type=\"file\"\n            name=\"memeFile\"\n            value={state.memeFile}\n            onChange={handleFileSelect}\n            accept=\"image/*\"\n          />\n        </label>\n        <input\n          type=\"text\"\n          name=\"inputTop\"\n          value={state.inputTopinputTop}\n          placeholder=\"Oberer Text\"\n          onChange={handleChange}\n          />\n        <input\n          type=\"text\"\n          name=\"inputBottom\"\n          value={state.inputBottom}\n          placeholder=\"Unterer Text\"\n          onChange={handleChange}\n        />\n        <div className=\"textOptions\">\n          <label className=\"optionLabel\"> Textfarbe: \n            <input\n              className=\"textOption\"\n              type=\"color\"\n              name=\"textColor\"\n              value={state.textColor}\n              onChange={handleChange}\n            />\n          </label> \n          <label className=\"optionLabel\">Schriftgröße: \n            <input\n              className=\"textOption\"\n              type=\"number\"\n              min=\"10\"\n              max=\"99\"\n              name=\"textSize\"\n              value={state.textSize}\n              onChange={handleChange}\n            />\n          </label>\n          <label className=\"optionLabel\">Schriftart: \n            <select\n              className=\"textOption\"\n              name=\"textFont\"\n              value={state.textFont}\n              onChange={handleChange}>\n                <option value=\"Verdana\">Verdana</option>\n                <option value=\"Courier New\">Courier New</option>\n                <option value=\"Comic Sans MS\">Comic Sans MS</option>\n                <option value=\"Arial\">Arial</option>\n                <option value=\"Georgia\">Georgia</option>\n                <option value=\"Pacifico\">Pacifico</option>\n            </select>\n          </label>\n          <label className=\"optionLabel\">Dateiformat: \n            <select\n              className=\"textOption\"\n              name=\"dateiTyp\"\n              value={state.dateiTyp}\n              onChange={handleChange}>\n                <option value=\".jpg\">JPG</option>\n                <option value=\".png\">PNG</option>\n                <option value=\".gif\">GIF</option>\n            </select>\n          </label>\n        </div>       \n      </form>\n      \n      {/*Meme Vorlage*/}\n      {meme &&\n      <div className=\"memeImgContainer\" id=\"final\">\n        <span\n          style={style}\n          className=\"textTop\"\n        >\n          {state.inputTop}\n        </span>\n        <img\n          className=\"image\"\n          src={meme}\n          alt=\"Dein Meme\"\n        />\n        <span\n          style={style}\n          className=\"textBottom\"\n        >\n          {state.inputBottom}\n        </span>\n      </div>\n      }\n      \n      {/*Meme erstellen*/}\n      {meme && <button\n                  className=\"downloadBtn\"\n                  onClick={() => downloadImage()}\n                >\n                  Meme generieren\n                </button>}\n      \n      {/*Fertiges Meme herunterladen*/}\n      {finalMeme &&\n        <a href={finalMeme}\n          className=\"downloadBtn\"\n          download={ \"Meme\" + state.dateiTyp}\n          >Download\n        </a>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}